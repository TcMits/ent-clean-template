// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
)

type UserDeleteRepository struct {
	client              *Client
	preDeleteFunctions  []func(context.Context, *Client, *User) error
	postDeleteFunctions []func(context.Context, *Client, *User) error
	isAtomic            bool
}

func NewUserDeleteRepository(
	client *Client,
	preDeleteFunctions []func(context.Context, *Client, *User) error,
	postDeleteFunctions []func(context.Context, *Client, *User) error,
	isAtomic bool,
) *UserDeleteRepository {
	return &UserDeleteRepository{
		client:              client,
		preDeleteFunctions:  preDeleteFunctions,
		postDeleteFunctions: postDeleteFunctions,
		isAtomic:            isAtomic,
	}
}

func (r *UserDeleteRepository) runPostDelete(
	ctx context.Context, client *Client, instance *User,
) error {
	for _, function := range r.postDeleteFunctions {
		err := function(ctx, client, instance)
		if err != nil {
			return err
		}
	}
	return nil
}

func (r *UserDeleteRepository) runPreDelete(
	ctx context.Context, client *Client, instance *User,
) error {
	for _, function := range r.preDeleteFunctions {
		err := function(ctx, client, instance)
		if err != nil {
			return err
		}
	}
	return nil
}

// using in Tx
func (r *UserDeleteRepository) DeleteWithClient(
	ctx context.Context, client *Client, instance *User,
) error {
	err := r.runPreDelete(ctx, client, instance)
	if err != nil {
		return err
	}
	err = client.User.DeleteOne(instance).Exec(ctx)
	if err != nil {
		return err
	}
	err = r.runPostDelete(ctx, client, instance)
	if err != nil {
		return err
	}
	return nil
}

func (r *UserDeleteRepository) Delete(
	ctx context.Context, instance *User,
) error {
	if !r.isAtomic {
		return r.DeleteWithClient(ctx, r.client, instance)
	}
	tx, err := r.client.Tx(ctx)
	if err != nil {
		return err
	}
	err = r.DeleteWithClient(ctx, tx.Client(), instance)
	if err != nil {
		if rerr := tx.Rollback(); rerr != nil {
			err = fmt.Errorf("rolling back transaction: %w", rerr)
		}
		return err
	}
	if err := tx.Commit(); err != nil {
		return fmt.Errorf("committing transaction: %w", err)
	}
	return nil
}
