// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/google/uuid"
)

// UserCreateInput represents a mutation input for creating users.
type UserCreateInput struct {
	CreateTime  *time.Time `json:"create_time,omitempty" form:"create_time"`
	UpdateTime  *time.Time `json:"update_time,omitempty" form:"update_time"`
	JwtTokenKey *string    `json:"jwt_token_key,omitempty" form:"jwt_token_key"`
	Password    *string    `json:"password,omitempty" form:"password"`
	Username    string     `json:"username,omitempty" form:"username"`
	FirstName   *string    `json:"first_name,omitempty" form:"first_name"`
	LastName    *string    `json:"last_name,omitempty" form:"last_name"`
	Email       string     `json:"email,omitempty" form:"email"`
	IsStaff     *bool      `json:"is_staff,omitempty" form:"is_staff"`
	IsSuperuser *bool      `json:"is_superuser,omitempty" form:"is_superuser"`
	IsActive    *bool      `json:"is_active,omitempty" form:"is_active"`
}

// Mutate applies the UserCreateInput on the UserCreate builder.
func (i *UserCreateInput) Mutate(m *UserMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.JwtTokenKey; v != nil {
		m.SetJwtTokenKey(*v)
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	m.SetUsername(i.Username)
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	m.SetEmail(i.Email)
	if v := i.IsStaff; v != nil {
		m.SetIsStaff(*v)
	}
	if v := i.IsSuperuser; v != nil {
		m.SetIsSuperuser(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
}

// SetInput applies the change-set in the UserCreateInput on the create builder.
func (c *UserCreate) SetInput(i *UserCreateInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UserUpdateInput represents a mutation input for updating users.
type UserUpdateInput struct {
	ID               uuid.UUID
	UpdateTime       *time.Time `json:"update_time,omitempty" form:"update_time"`
	JwtTokenKey      *string    `json:"jwt_token_key,omitempty" form:"jwt_token_key"`
	ClearJwtTokenKey bool
	Password         *string `json:"password,omitempty" form:"password"`
	ClearPassword    bool
	Username         *string `json:"username,omitempty" form:"username"`
	FirstName        *string `json:"first_name,omitempty" form:"first_name"`
	ClearFirstName   bool
	LastName         *string `json:"last_name,omitempty" form:"last_name"`
	ClearLastName    bool
	Email            *string `json:"email,omitempty" form:"email"`
	IsStaff          *bool   `json:"is_staff,omitempty" form:"is_staff"`
	ClearIsStaff     bool
	IsSuperuser      *bool `json:"is_superuser,omitempty" form:"is_superuser"`
	ClearIsSuperuser bool
	IsActive         *bool `json:"is_active,omitempty" form:"is_active"`
	ClearIsActive    bool
}

// Mutate applies the UserUpdateInput on the UserMutation.
func (i *UserUpdateInput) Mutate(m *UserMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if i.ClearJwtTokenKey {
		m.ClearJwtTokenKey()
	}
	if v := i.JwtTokenKey; v != nil {
		m.SetJwtTokenKey(*v)
	}
	if i.ClearPassword {
		m.ClearPassword()
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.Username; v != nil {
		m.SetUsername(*v)
	}
	if i.ClearFirstName {
		m.ClearFirstName()
	}
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if i.ClearLastName {
		m.ClearLastName()
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if i.ClearIsStaff {
		m.ClearIsStaff()
	}
	if v := i.IsStaff; v != nil {
		m.SetIsStaff(*v)
	}
	if i.ClearIsSuperuser {
		m.ClearIsSuperuser()
	}
	if v := i.IsSuperuser; v != nil {
		m.SetIsSuperuser(*v)
	}
	if i.ClearIsActive {
		m.ClearIsActive()
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
}

// SetInput applies the change-set in the UserUpdateInput on the update builder.
func (u *UserUpdate) SetInput(i *UserUpdateInput) *UserUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UserUpdateInput on the update-one builder.
func (u *UserUpdateOne) SetInput(i *UserUpdateInput) *UserUpdateOne {
	i.Mutate(u.Mutation())
	return u
}
