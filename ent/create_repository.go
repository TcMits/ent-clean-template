// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
)

type UserCreateRepository struct {
	client              *Client
	preCreateFunctions  []func(context.Context, *Client, *UserCreateInput) error
	postCreateFunctions []func(context.Context, *Client, *User) error
	isAtomic            bool
}

func NewUserCreateRepository(
	client *Client,
	preCreateFunctions []func(context.Context, *Client, *UserCreateInput) error,
	postCreateFunctions []func(context.Context, *Client, *User) error,
	isAtomic bool,
) *UserCreateRepository {
	return &UserCreateRepository{
		client:              client,
		preCreateFunctions:  preCreateFunctions,
		postCreateFunctions: postCreateFunctions,
		isAtomic:            isAtomic,
	}
}

func (r *UserCreateRepository) runPreCreate(ctx context.Context, client *Client, i *UserCreateInput) error {
	for _, function := range r.preCreateFunctions {
		err := function(ctx, client, i)
		if err != nil {
			return err
		}
	}
	return nil
}

func (r *UserCreateRepository) runPostCreate(ctx context.Context, client *Client, instance *User) error {
	for _, function := range r.postCreateFunctions {
		err := function(ctx, client, instance)
		if err != nil {
			return err
		}
	}
	return nil
}

// using in Tx
func (r *UserCreateRepository) CreateWithClient(
	ctx context.Context, client *Client, input *UserCreateInput,
) (*User, error) {
	err := r.runPreCreate(ctx, client, input)
	if err != nil {
		return nil, err
	}
	instance, err := client.User.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}
	err = r.runPostCreate(ctx, client, instance)
	if err != nil {
		return nil, err
	}
	return instance, nil
}

func (r *UserCreateRepository) Create(
	ctx context.Context, input *UserCreateInput,
) (*User, error) {
	if !r.isAtomic {
		return r.CreateWithClient(ctx, r.client, input)
	}
	tx, err := r.client.Tx(ctx)
	if err != nil {
		return nil, err
	}
	instance, err := r.CreateWithClient(ctx, tx.Client(), input)
	if err != nil {
		if rerr := tx.Rollback(); rerr != nil {
			err = fmt.Errorf("rolling back transaction: %w", rerr)
		}
		return nil, err
	}
	if err := tx.Commit(); err != nil {
		return nil, fmt.Errorf("committing transaction: %w", err)
	}
	return instance, nil
}
