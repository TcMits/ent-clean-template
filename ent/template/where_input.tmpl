{{/*
Copyright 2019-present Facebook Inc. All rights reserved.
This source code is licensed under the Apache 2.0 license found
in the LICENSE file in the root directory of this source tree.
*/}}

{{ define "model/additional/where_input" }}
    {{ $comparableFields := list $.ID }}
    {{ $names := nodePaginationNames $ }}
    {{ with $annotation := $.ID.Annotations.EntGQL }}
        {{ if isSkipMode $annotation.Skip "where_input" }}
            {{ $comparableFields = list }}
        {{ end }}
    {{ end }}
    {{ range $f := filterFields $.Fields (skipMode "where_input") }}
        {{ if $f.Type.Comparable }}
            {{ $comparableFields = append $comparableFields $f }}
        {{ end }}
    {{ end }}
    {{ $name := $names.Node }}
    {{ $input := $names.WhereInput }}
    // {{ $input }} represents a where input for filtering {{ $.Name }} queries.
    type {{ $input }} struct {
        Predicates []predicate.{{ $.Name }} `json:"-"`
        Not *{{ $input }} `json:"not,omitempty"`
        Or  []*{{ $input }} `json:"or,omitempty"`
        And []*{{ $input }} `json:"and,omitempty"`
        {{- range $f := $comparableFields }}

            // "{{ $f.Name }}" field predicates.
            {{- range $op := $f.Ops }}
                {{- $field := print $f.StructField $op.Name }}
                {{- $jsonTag := print $f.Name "_" $op.Name }}
                {{- /* We name the field filter "<Field>EQ()" as "<Field>()", because it's cleaner (e.g. "name_eq" -> "name") */}}
                {{- if eq $op.Name "EQ" }}
                    {{- $field = $f.StructField }}
                    {{- $jsonTag = $f.Name }}
                {{- end }}
                {{- $type := $f.Type }}
                {{- if $op.Niladic }}
                    {{- $type = "bool" }}
                {{- else if $op.Variadic }}
                    {{- $type = print "[]" $type }}
                {{- else if not $f.Type.RType.IsPtr }}
                    {{- $type = print "*" $type }}
                {{- end }}
                {{ $field }} {{ $type }} `json:"{{ snake $jsonTag }},omitempty" form:"{{ snake $jsonTag }}" param:"{{ snake $jsonTag }}" url:"{{ snake $jsonTag }}"`
            {{- end }}
        {{- end }}

        {{ range $e := filterEdges $.Edges (skipMode "where_input") }}

            // "{{ $e.Name }}" edge predicates.
            {{- $field := print "Has" $e.StructField }}
            {{- $jsonTag := print "has_" $e.Name }}
            {{ $field }} *bool `json:"{{ snake $jsonTag }},omitempty" form:"{{ snake $jsonTag }}" param:"{{ snake $jsonTag }}" url:"{{ snake $jsonTag }}"`
            {{- $field = print $field "With" }}
            {{- $jsonTag = print $jsonTag "_with" }}
            {{- $names := nodePaginationNames $e.Type }}
            {{ $field }} []*{{ $names.WhereInput }} `json:"{{ snake $jsonTag }},omitempty" form:"{{ snake $jsonTag }}" param:"{{ snake $jsonTag }}" url:"{{ snake $jsonTag }}"`
        {{- end }}
    }

    // AddPredicates adds custom predicates to the where input to be used during the filtering phase.
    func (i *{{ $input }}) AddPredicates(predicates ...predicate.{{ $.Name }}) {
        i.Predicates = append(i.Predicates, predicates...)
    }

    {{ $err := printf "ErrEmpty%s" $input }}

    // Filter applies the {{ $input }} filter on the {{ $.QueryName }} builder.
    func (i *{{ $input }}) Filter(q *{{ $.QueryName }}) (*{{ $.QueryName }}, error) {
        if i == nil {
            return q, nil
        }
        p, err := i.P()
        if err != nil {
            {{- /* Skip errors only for top-level empty predicates. The rest are invalid. */}}
            if err == {{ $err }} {
               return q, nil
            }
            return nil, err
        }
        return q.Where(p), nil
    }

    // {{ $err }} is returned in case the {{ $input }} is empty.
    var {{ $err }} = errors.New("{{ base $.Config.Package }}: empty predicate {{ $input }}")

    // P returns a predicate for filtering {{ plural $.Name | lower }}.
    // An error is returned if the input is empty or invalid.
    func (i *{{ $input }}) P() (predicate.{{ $.Name }}, error) {
        var predicates []predicate.{{ $.Name }}
        if i.Not != nil {
            p, err := i.Not.P()
            if err != nil {
                return nil, fmt.Errorf("%w: field 'not'", err)
            }
            predicates = append(predicates, {{ $.Package }}.Not(p))
        }
        switch n := len(i.Or); {
        case n == 1:
            p, err := i.Or[0].P()
            if err != nil {
                return nil, fmt.Errorf("%w: field 'or'", err)
            }
            predicates = append(predicates, p)
        case n > 1:
            or := make([]predicate.{{ $.Name }}, 0, n)
            for _, w := range i.Or {
                p, err := w.P()
                if err != nil {
                    return nil, fmt.Errorf("%w: field 'or'", err)
                }
                or = append(or, p)
            }
            predicates = append(predicates, {{ $.Package }}.Or(or...))
        }
        switch n := len(i.And); {
        case n == 1:
            p, err := i.And[0].P()
            if err != nil {
                return nil, fmt.Errorf("%w: field 'and'", err)
            }
            predicates = append(predicates, p)
        case n > 1:
            and := make([]predicate.{{ $.Name }}, 0, n)
            for _, w := range i.And {
                p, err := w.P()
                if err != nil {
                    return nil, fmt.Errorf("%w: field 'and'", err)
                }
                and = append(and, p)
            }
            predicates = append(predicates, {{ $.Package }}.And(and...))
        }
        predicates = append(predicates, i.Predicates...)
        {{- range $f := $comparableFields }}
            {{- range $op := $f.Ops }}
                {{- $func := print $f.StructField $op.Name }}
                {{- $field := $func }}
                {{- /* We name the <Field>EQ() filter as <Field>(), because it's nicer (e.g. "name_eq" -> "name") */}}
                {{- if eq $op.Name "EQ" }}
                    {{- $field = $f.StructField }}
                {{- end }}
                {{- if $op.Niladic }}
                    if i.{{ $field }} {
                        predicates = append(predicates, {{ $.Package }}.{{ $func }}())
                    }
                {{- else }}
                    {{- if $op.Variadic }}
                        if len(i.{{ $field }}) > 0 {
                            predicates = append(predicates, {{ $.Package }}.{{ $func }}(i.{{ $field }}...))
                        }
                    {{- else }}
                        if i.{{ $field }} != nil {
                            predicates = append(predicates, {{ $.Package }}.{{ $func }}({{ if not $f.Type.RType.IsPtr }}*{{ end }}i.{{ $field }}))
                        }
                    {{- end }}
                {{- end }}
            {{- end }}
        {{- end }}
        {{ range $e := filterEdges $.Edges (skipMode "where_input") }}
            {{- $func := print "Has" $e.StructField }}
            if i.{{ $func }} != nil {
                p := {{ $.Package }}.{{ $func }}()
                if !*i.{{ $func }} {
                    p = {{ $.Package }}.Not(p)
                }
                predicates = append(predicates, p)
            }
            {{- $func = print $func "With" }}
            if len(i.{{ $func }}) > 0 {
                with := make([]predicate.{{ $e.Type.Name }}, 0, len(i.{{ $func }}))
                for _, w := range i.{{ $func }} {
                    p, err := w.P()
                    if err != nil {
                        return nil, fmt.Errorf("%w: field '{{ $func }}'", err)
                    }
                    with = append(with, p)
                }
                predicates = append(predicates, {{ $.Package }}.{{ $func }}(with...))
            }
        {{- end }}
        switch len(predicates) {
        case 0:
            return nil, {{ $err }}
        case 1:
            return predicates[0], nil
        default:
            return {{ $.Package }}.And(predicates...), nil
        }
    }
{{ end }}
