{{ define "model/additional/mutation_input" }}

    {{ $input := print $.Name "CreateInput" }}
    // {{ $input }} represents a mutation input for creating {{ plural $.Name | lower }}.
    type {{ $input }} struct {
    {{- range $f := $.Fields }}
        {{- if not $f.IsEdgeField }}
            {{ $f.StructField }} {{ if and (or $f.Optional $f.Default) (not $f.Type.RType.IsPtr) }}*{{ end }}{{ $f.Type }} `json:"{{ $f.Name }},omitempty" form:"{{ $f.Name }}"`
        {{- end }}
    {{- end }}
    {{- range $e := $.Edges }}
        {{- if $e.Unique }}
            {{- $structField := print (pascal $e.Name) "ID" }}
            {{ $structField }} {{ if $e.Optional }}*{{ end }}{{ $e.Type.ID.Type }} `json:"{{ snake $structField }},omitempty" form:"{{ snake $structField }}"`
        {{- else }}
            {{- $structField := print (singular $e.Name | pascal) "IDs" }}
            {{ $structField }} []{{ $e.Type.ID.Type }} `json:"{{ snake $structField }},omitempty" form:"{{ snake $structField }}"`
        {{- end }}
    {{- end }}
    }

    // Mutate applies the {{ $input }} on the {{ $.CreateName }} builder.
    func (i *{{ $input }}) Mutate(m *{{ $.MutationName }}) {
    {{- range $f := $.Fields }}
        {{- if not $f.IsEdgeField }}
            {{- if or $f.Optional $f.Default }}
                if v := i.{{ $f.StructField }}; v != nil {
                m.{{ $f.MutationSet }}(*v)
                }
            {{- else }}
                m.{{ $f.MutationSet }}(i.{{ $f.StructField }})
            {{- end }}
        {{- end }}
    {{- end }}
    {{- range $e := $.Edges }}
        {{- if $e.Unique }}
            {{- $structField := print (pascal $e.Name) "ID" }}
            {{- if $e.Optional }}
                if v := i.{{ $structField }}; v != nil {
                m.{{ $e.MutationSet }}(*v)
                }
            {{- else }}
                m.{{ $e.MutationSet }}(i.{{ $structField }})
            {{- end }}
        {{- else }}
            {{- $structField := print (singular $e.Name | pascal) "IDs" }}
            if ids := i.{{ $structField }}; len(ids) > 0 {
            m.{{ $e.MutationAdd }}(ids...)
            }
        {{- end }}
    {{- end }}
    }

    // SetInput applies the change-set in the {{ $input }} on the create builder.
    func(c *{{ $.CreateName }}) SetInput(i *{{ $input }}) *{{ $.CreateName }} {
    i.Mutate(c.Mutation())
    return c
    }

    {{ $input = print $.Name "UpdateInput" }}
    // {{ $input }} represents a mutation input for updating {{ plural $.Name | lower }}.
    type {{ $input }} struct {
        {{ print "ID" }} {{ $.ID.Type }}
    {{- range $f := $.MutableFields }}
        {{- if not $f.IsEdgeField }}
            {{ $f.StructField }} {{ if not $f.Type.RType.IsPtr }}*{{ end }}{{ $f.Type }} `json:"{{ $f.Name }},omitempty" form:"{{ $f.Name }}"`
            {{- if $f.Optional }}
                {{ print "Clear" $f.StructField }} bool
            {{- end }}
        {{- end }}
    {{- end }}
    {{- range $e := $.Edges }}
        {{- if $e.Unique }}
            {{- $structField := print (pascal $e.Name) "ID" }}
            {{ $structField }} *{{ $e.Type.ID.Type }} `json:"{{ snake $structField }},omitempty" form:"{{ snake $structField }}"`
            {{ $e.MutationClear }} bool
        {{- else }}
            {{ $e.MutationAdd }} []{{ $e.Type.ID.Type }} `json:"{{ snake $e.MutationAdd }},omitempty" form:"{{ snake $e.MutationAdd }}"`
            {{ $e.MutationRemove }} []{{ $e.Type.ID.Type }} `json:"{{ snake $e.MutationRemove }},omitempty" form:"{{ snake $e.MutationRemove }}"`
        {{- end }}
    {{- end }}
    }

    // Mutate applies the {{ $input }} on the {{ $.MutationName }}.
    func (i *{{ $input }}) Mutate(m *{{ $.MutationName }}) {
    {{- range $f := $.MutableFields }}
        {{- if not $f.IsEdgeField }}
            {{- if $f.Optional }}
                if i.{{ print "Clear" $f.StructField }} {
                m.{{ print "Clear" $f.StructField }}()
                }
            {{- end }}
            if v := i.{{ $f.StructField }}; v != nil {
            m.{{ $f.MutationSet }}(*v)
            }
        {{- end }}
    {{- end }}
    {{- range $e := $.Edges }}
        {{- if $e.Unique }}
            if i.{{ $e.MutationClear }} {
            m.{{ $e.MutationClear }}()
            }
            {{- $structField := print (pascal $e.Name) "ID" }}
            if v := i.{{ $structField }}; v != nil {
            m.{{ $e.MutationSet }}(*v)
            }
        {{- else }}
            if ids := i.{{ $e.MutationAdd }}; len(ids) > 0 {
            m.{{ $e.MutationAdd }}(ids...)
            }
            if ids := i.{{ $e.MutationRemove }}; len(ids) > 0 {
            m.{{ $e.MutationRemove }}(ids...)
            }
        {{- end }}
    {{- end }}
    }

    // SetInput applies the change-set in the {{ $input }} on the update builder.
    func(u *{{ $.UpdateName }}) SetInput(i *{{ $input }}) *{{ $.UpdateName }} {
    i.Mutate(u.Mutation())
    return u
    }

    // SetInput applies the change-set in the {{ $input }} on the update-one builder.
    func(u *{{ $.UpdateOneName }}) SetInput(i *{{ $input }}) *{{ $.UpdateOneName }} {
    i.Mutate(u.Mutation())
    return u
    }
{{ end }}
