{{ define "model/additional/read_repository" }}
    {{ $names := nodePaginationNames $ }}
    {{ $repository := print $.Name "ReadRepository" }}
    {{ $orderInput := print $.Name "OrderInput" }}
    {{ $whereInput := $names.WhereInput }}
    type {{ $repository }} struct {
        client *Client
    }

    func New{{ $repository }}(
        client *Client,
    ) *{{ $repository }} {
        return &{{ $repository }}{
            client: client,
        }
    }

    func (r *{{ $repository }}) prepareQuery(
        client *Client, limit *int, offset *int, o *{{ $orderInput }}, w *{{ $whereInput }},
    ) (*{{ $.QueryName }}, error) {
        var err error
        q := r.client.{{ $.Name }}.Query()
        if limit != nil {
            q = q.Limit(*limit)
        }
        if offset != nil {
            q = q.Offset(*offset)
        }
        if o != nil {
            q = o.Order(q)
        }
        if w != nil {
            q, err = w.Filter(q)
            if err != nil {
                return nil, err
            }
        }
        return q, nil
    }

    // using in Tx
    func (r *{{ $repository }}) GetWithClient(
        ctx context.Context, client *Client, w *{{ $whereInput }}, forUpdate bool,
    ) (*{{ $.Name }}, error) {
        q, err := r.prepareQuery(client, nil, nil, nil, w)
        if err != nil {
            return nil, err
        }
        if forUpdate {
            q = q.ForUpdate()
        }
        instance, err := q.Only(ctx)
        if err != nil {
            return nil, err
        }
        return instance, nil
    }

    // using in Tx
    func (r *{{ $repository }}) ListWithClient(
        ctx context.Context, client *Client, limit *int, offset *int, o *{{ $orderInput }}, w *{{ $whereInput }}, forUpdate bool,
    ) ([]*{{ $.Name }}, error) {
        q, err := r.prepareQuery(client, limit, offset, o, w)
        if err != nil {
            return nil, err
        }
        if forUpdate {
            q = q.ForUpdate()
        }
        instances, err := q.All(ctx)
        if err != nil {
            return nil, err
        }
        return instances, nil
    }

    func (r *{{ $repository }}) Count(ctx context.Context, w *{{ $whereInput }}) (int, error) { 
        q, err := r.prepareQuery(r.client, nil, nil, nil, w)
        if err != nil {
            return 0, err
        }
        count, err := q.Count(ctx)
        if err != nil {
            return 0, err
        }
        return count, nil
    }

    func (r *{{ $repository }}) Get(ctx context.Context, w *{{ $whereInput }}) (*{{ $.Name }}, error) {
        return r.GetWithClient(ctx, r.client, w, false)
    }

    func (r *{{ $repository }}) List(
        ctx context.Context, limit *int, offset *int, o *{{ $orderInput }}, w *{{ $whereInput }},
    ) ([]*{{ $.Name }}, error) {
        return r.ListWithClient(ctx, r.client, limit, offset, o, w, false)
    }
{{ end }}

