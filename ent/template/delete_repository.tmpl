{{ define "delete_repository" }}
    {{- /*gotype: entgo.io/ent/entc/gen.Graph*/ -}}

    {{ $pkg := base $.Config.Package }}
    {{- with extend $ "Package" $pkg }}
        {{ template "header" . }}
    {{- end }}

    {{ template "import" $ }}

    {{- range $n := $.Nodes }}
        {{ $repository := print $n.Name "DeleteRepository" }}
        type {{ $repository }} struct {
            client *Client
            preDeleteFunctions []func(context.Context, *Client, *{{ $n.Name }}) error
            postDeleteFunctions []func(context.Context, *Client, *{{ $n.Name }}) error
            isAtomic bool
        }

        func New{{ $repository }}(
            client *Client,
            preDeleteFunctions []func(context.Context, *Client, *{{ $n.Name }}) error,
            postDeleteFunctions []func(context.Context, *Client, *{{ $n.Name }}) error,
            isAtomic bool,
        ) *{{ $repository }} {
            return &{{ $repository }}{
                client: client,
                preDeleteFunctions: preDeleteFunctions,
                postDeleteFunctions: postDeleteFunctions,
                isAtomic: isAtomic,
            }
        }

        func (r *{{ $repository }}) runPostDelete(
            ctx context.Context, client *Client, instance *{{ $n.Name }},
        ) error {
            for _, function := range r.postDeleteFunctions {
              err := function(ctx, client, instance)
              if err != nil {
                return err
              }
            }
            return nil
        }

        func (r *{{ $repository }}) runPreDelete(
            ctx context.Context, client *Client, instance *{{ $n.Name }},
        ) error {
            for _, function := range r.preDeleteFunctions {
              err := function(ctx, client, instance)
              if err != nil {
                return err
              }
            }
            return nil
        }

        // using in Tx
        func (r *{{ $repository }}) DeleteWithClient(
            ctx context.Context, client *Client, instance *{{ $n.Name }},
        ) error {
            err := r.runPreDelete(ctx, client, instance)
            if err != nil {
              return err
            }
            err = client.{{ $n.Name }}.DeleteOne(instance).Exec(ctx)
            if err != nil {
              return err
            }
            err = r.runPostDelete(ctx, client, instance)
            if err != nil {
              return err
            }
            return nil
        }
 
        func (r *{{ $repository }}) Delete(
            ctx context.Context, instance *{{ $n.Name }},
        ) error {
            if !r.isAtomic {
                return r.DeleteWithClient(ctx, r.client, instance)
            }
            tx, err := r.client.Tx(ctx)
            if err != nil {
                return err
            }
            err = r.DeleteWithClient(ctx, tx.Client(), instance)
            if err != nil {
                if rerr := tx.Rollback(); rerr != nil {
                    err = fmt.Errorf("rolling back transaction: %w", rerr)
                }
                return err
            }
            if err := tx.Commit(); err != nil {
                return fmt.Errorf("committing transaction: %w", err) 
            }
            return nil
        }
    {{- end }}
{{ end }}
