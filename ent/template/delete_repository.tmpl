{{ define "model/additional/delete_repository" }}
    {{ $repository := print $.Name "DeleteRepository" }}
    type {{ $repository }} struct {
        client *Client
        isAtomic bool
    }

    func New{{ $repository }}(
        client *Client,
        isAtomic bool,
    ) *{{ $repository }} {
        return &{{ $repository }}{
            client: client,
            isAtomic: isAtomic,
        }
    }

    // using in Tx
    func (r *{{ $repository }}) DeleteWithClient(
        ctx context.Context, client *Client, instance *{{ $.Name }},
    ) error {
        err := client.{{ $.Name }}.DeleteOne(instance).Exec(ctx)
        if err != nil {
          return err
        }
        return nil
    }

    func (r *{{ $repository }}) Delete(
        ctx context.Context, instance *{{ $.Name }},
    ) error {
        if !r.isAtomic {
            return r.DeleteWithClient(ctx, r.client, instance)
        }
        tx, err := r.client.Tx(ctx)
        if err != nil {
            return err
        }
        err = r.DeleteWithClient(ctx, tx.Client(), instance)
        if err != nil {
            if rerr := tx.Rollback(); rerr != nil {
                err = fmt.Errorf("rolling back transaction: %w", rerr)
            }
            return err
        }
        if err := tx.Commit(); err != nil {
            return fmt.Errorf("committing transaction: %w", err) 
        }
        return nil
    }
{{ end }}
