// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	reflect "reflect"

	model "github.com/TcMits/ent-clean-template/pkg/entity/model"
	usecase "github.com/TcMits/ent-clean-template/pkg/entity/model/usecase"
	gomock "github.com/golang/mock/gomock"
)

// MockLoginUseCase is a mock of LoginUseCase interface.
type MockLoginUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockLoginUseCaseMockRecorder
}

// MockLoginUseCaseMockRecorder is the mock recorder for MockLoginUseCase.
type MockLoginUseCaseMockRecorder struct {
	mock *MockLoginUseCase
}

// NewMockLoginUseCase creates a new mock instance.
func NewMockLoginUseCase(ctrl *gomock.Controller) *MockLoginUseCase {
	mock := &MockLoginUseCase{ctrl: ctrl}
	mock.recorder = &MockLoginUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginUseCase) EXPECT() *MockLoginUseCaseMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockLoginUseCase) Login(arg0 context.Context, arg1 *usecase.LoginInput) (*usecase.JWTAuthenticatedPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*usecase.JWTAuthenticatedPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockLoginUseCaseMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockLoginUseCase)(nil).Login), arg0, arg1)
}

// RefreshToken mocks base method.
func (m *MockLoginUseCase) RefreshToken(arg0 context.Context, arg1 *usecase.RefreshTokenInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockLoginUseCaseMockRecorder) RefreshToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockLoginUseCase)(nil).RefreshToken), arg0, arg1)
}

// VerifyToken mocks base method.
func (m *MockLoginUseCase) VerifyToken(arg0 context.Context, arg1 string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", arg0, arg1)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockLoginUseCaseMockRecorder) VerifyToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockLoginUseCase)(nil).VerifyToken), arg0, arg1)
}
