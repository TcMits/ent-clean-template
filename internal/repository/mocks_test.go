// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package repository_test is a generated GoMock package.
package repository_test

import (
	context "context"
	reflect "reflect"

	model "github.com/TcMits/ent-clean-template/pkg/entity/model"
	usecase "github.com/TcMits/ent-clean-template/pkg/entity/model/usecase"
	gomock "github.com/golang/mock/gomock"
)

// MockGetUserRepository is a mock of GetUserRepository interface.
type MockGetUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGetUserRepositoryMockRecorder
}

// MockGetUserRepositoryMockRecorder is the mock recorder for MockGetUserRepository.
type MockGetUserRepositoryMockRecorder struct {
	mock *MockGetUserRepository
}

// NewMockGetUserRepository creates a new mock instance.
func NewMockGetUserRepository(ctrl *gomock.Controller) *MockGetUserRepository {
	mock := &MockGetUserRepository{ctrl: ctrl}
	mock.recorder = &MockGetUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetUserRepository) EXPECT() *MockGetUserRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockGetUserRepository) Get(arg0 context.Context, arg1 ...model.PredicateUser) (*model.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGetUserRepositoryMockRecorder) Get(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGetUserRepository)(nil).Get), varargs...)
}

// MockLoginRepository is a mock of LoginRepository interface.
type MockLoginRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLoginRepositoryMockRecorder
}

// MockLoginRepositoryMockRecorder is the mock recorder for MockLoginRepository.
type MockLoginRepositoryMockRecorder struct {
	mock *MockLoginRepository
}

// NewMockLoginRepository creates a new mock instance.
func NewMockLoginRepository(ctrl *gomock.Controller) *MockLoginRepository {
	mock := &MockLoginRepository{ctrl: ctrl}
	mock.recorder = &MockLoginRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginRepository) EXPECT() *MockLoginRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockLoginRepository) Get(arg0 context.Context, arg1 ...model.PredicateUser) (*model.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockLoginRepositoryMockRecorder) Get(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLoginRepository)(nil).Get), varargs...)
}

// Login mocks base method.
func (m *MockLoginRepository) Login(arg0 context.Context, arg1 *usecase.LoginInput) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockLoginRepositoryMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockLoginRepository)(nil).Login), arg0, arg1)
}
