basePath: /api/v1
definitions:
  usecase.JWTAuthenticatedPayload:
    properties:
      access_token:
        type: string
      refresh_key:
        type: string
      refresh_token:
        type: string
    type: object
  usecase.LoginInput:
    properties:
      password:
        minLength: 1
        type: string
      username:
        maxLength: 128
        minLength: 1
        type: string
    required:
    - password
    - username
    type: object
  usecase.PublicMeUseCaseUpdateInput:
    properties:
      email:
        description: email has to be unique
        type: string
      first_name:
        maxLength: 128
        type: string
      last_name:
        maxLength: 128
        type: string
      username:
        description: username has to be unique
        maxLength: 128
        minLength: 1
        type: string
    type: object
  usecase.RefreshTokenInput:
    properties:
      refresh_key:
        type: string
      refresh_token:
        type: string
    required:
    - refresh_key
    - refresh_token
    type: object
  usecase.publicMeUseCaseUpdateSerializedInfo:
    properties:
      create_time:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      is_staff:
        type: boolean
      is_superuser:
        type: boolean
      last_name:
        type: string
      self:
        type: string
      update_time:
        type: string
      username:
        type: string
    type: object
  v1.emptyResponse:
    type: object
  v1.errorResponse:
    properties:
      code:
        type: string
      detail:
        type: string
      message:
        type: string
    type: object
  v1.refreshTokenResponse:
    properties:
      token:
        type: string
    type: object
  v1.verifyTokenRequest:
    properties:
      token:
        type: string
    required:
    - token
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - multipart/form-data
      - application/x-www-form-urlencoded
      - application/json
      parameters:
      - description: Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/usecase.LoginInput'
      - in: formData
        minLength: 1
        name: password
        required: true
        type: string
      - in: formData
        maxLength: 128
        minLength: 1
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usecase.JWTAuthenticatedPayload'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
      summary: Login endpoint
      tags:
      - login
  /me:
    get:
      consumes:
      - multipart/form-data
      - application/x-www-form-urlencoded
      - application/json
      parameters:
      - description: Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/usecase.PublicMeUseCaseUpdateInput'
      - description: email has to be unique
        in: formData
        name: email
        type: string
      - in: formData
        maxLength: 128
        name: first_name
        type: string
      - in: formData
        maxLength: 128
        name: last_name
        type: string
      - description: username has to be unique
        in: formData
        maxLength: 128
        minLength: 1
        name: username
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usecase.publicMeUseCaseUpdateSerializedInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
      summary: Me endpoints
      tags:
      - me
    patch:
      consumes:
      - multipart/form-data
      - application/x-www-form-urlencoded
      - application/json
      parameters:
      - description: Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/usecase.PublicMeUseCaseUpdateInput'
      - description: email has to be unique
        in: formData
        name: email
        type: string
      - in: formData
        maxLength: 128
        name: first_name
        type: string
      - in: formData
        maxLength: 128
        name: last_name
        type: string
      - description: username has to be unique
        in: formData
        maxLength: 128
        minLength: 1
        name: username
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usecase.publicMeUseCaseUpdateSerializedInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
      summary: Me endpoints
      tags:
      - me
    put:
      consumes:
      - multipart/form-data
      - application/x-www-form-urlencoded
      - application/json
      parameters:
      - description: Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/usecase.PublicMeUseCaseUpdateInput'
      - description: email has to be unique
        in: formData
        name: email
        type: string
      - in: formData
        maxLength: 128
        name: first_name
        type: string
      - in: formData
        maxLength: 128
        name: last_name
        type: string
      - description: username has to be unique
        in: formData
        maxLength: 128
        minLength: 1
        name: username
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usecase.publicMeUseCaseUpdateSerializedInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
      summary: Me endpoints
      tags:
      - me
  /refresh-token:
    post:
      consumes:
      - multipart/form-data
      - application/x-www-form-urlencoded
      - application/json
      parameters:
      - description: Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/usecase.RefreshTokenInput'
      - in: formData
        name: refresh_key
        required: true
        type: string
      - in: formData
        name: refresh_token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.refreshTokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
      summary: Refresh token endpoint
      tags:
      - refresh-token
  /verify-token:
    post:
      consumes:
      - multipart/form-data
      - application/x-www-form-urlencoded
      - application/json
      parameters:
      - description: Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/v1.verifyTokenRequest'
      - in: formData
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.emptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
      summary: Verify token endpoint
      tags:
      - verify-token
swagger: "2.0"
