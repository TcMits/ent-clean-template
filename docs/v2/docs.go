// Package v2 GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package v2

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/login": {
            "post": {
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "login"
                ],
                "summary": "Login endpoint",
                "parameters": [
                    {
                        "description": "Payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/usecase.LoginInput"
                        }
                    },
                    {
                        "minLength": 1,
                        "type": "string",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "maxLength": 128,
                        "minLength": 1,
                        "type": "string",
                        "name": "username",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/usecase.JWTAuthenticatedPayload"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    }
                }
            }
        },
        "/me": {
            "get": {
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "me"
                ],
                "summary": "Me endpoints",
                "parameters": [
                    {
                        "description": "Payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/usecase.PublicMeUseCaseUpdateInput"
                        }
                    },
                    {
                        "type": "string",
                        "description": "email has to be unique",
                        "name": "email",
                        "in": "formData"
                    },
                    {
                        "maxLength": 128,
                        "type": "string",
                        "name": "first_name",
                        "in": "formData"
                    },
                    {
                        "maxLength": 128,
                        "type": "string",
                        "name": "last_name",
                        "in": "formData"
                    },
                    {
                        "maxLength": 128,
                        "minLength": 1,
                        "type": "string",
                        "description": "username has to be unique",
                        "name": "username",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/usecase.publicMeUseCaseUpdateSerializedInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "me"
                ],
                "summary": "Me endpoints",
                "parameters": [
                    {
                        "description": "Payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/usecase.PublicMeUseCaseUpdateInput"
                        }
                    },
                    {
                        "type": "string",
                        "description": "email has to be unique",
                        "name": "email",
                        "in": "formData"
                    },
                    {
                        "maxLength": 128,
                        "type": "string",
                        "name": "first_name",
                        "in": "formData"
                    },
                    {
                        "maxLength": 128,
                        "type": "string",
                        "name": "last_name",
                        "in": "formData"
                    },
                    {
                        "maxLength": 128,
                        "minLength": 1,
                        "type": "string",
                        "description": "username has to be unique",
                        "name": "username",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/usecase.publicMeUseCaseUpdateSerializedInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "me"
                ],
                "summary": "Me endpoints",
                "parameters": [
                    {
                        "description": "Payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/usecase.PublicMeUseCaseUpdateInput"
                        }
                    },
                    {
                        "type": "string",
                        "description": "email has to be unique",
                        "name": "email",
                        "in": "formData"
                    },
                    {
                        "maxLength": 128,
                        "type": "string",
                        "name": "first_name",
                        "in": "formData"
                    },
                    {
                        "maxLength": 128,
                        "type": "string",
                        "name": "last_name",
                        "in": "formData"
                    },
                    {
                        "maxLength": 128,
                        "minLength": 1,
                        "type": "string",
                        "description": "username has to be unique",
                        "name": "username",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/usecase.publicMeUseCaseUpdateSerializedInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    }
                }
            }
        },
        "/refresh-token": {
            "post": {
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "refresh-token"
                ],
                "summary": "Refresh token endpoint",
                "parameters": [
                    {
                        "description": "Payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/usecase.RefreshTokenInput"
                        }
                    },
                    {
                        "type": "string",
                        "name": "refresh_key",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "refresh_token",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.refreshTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    }
                }
            }
        },
        "/verify-token": {
            "post": {
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "verify-token"
                ],
                "summary": "Verify token endpoint",
                "parameters": [
                    {
                        "description": "Payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.verifyTokenRequest"
                        }
                    },
                    {
                        "type": "string",
                        "name": "token",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.emptyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "usecase.JWTAuthenticatedPayload": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_key": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "usecase.LoginInput": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "minLength": 1
                },
                "username": {
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 1
                }
            }
        },
        "usecase.PublicMeUseCaseUpdateInput": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "email has to be unique",
                    "type": "string"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 128
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 128
                },
                "username": {
                    "description": "username has to be unique",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 1
                }
            }
        },
        "usecase.RefreshTokenInput": {
            "type": "object",
            "required": [
                "refresh_key",
                "refresh_token"
            ],
            "properties": {
                "refresh_key": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "usecase.publicMeUseCaseUpdateSerializedInfo": {
            "type": "object",
            "properties": {
                "create_time": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "is_staff": {
                    "type": "boolean"
                },
                "is_superuser": {
                    "type": "boolean"
                },
                "last_name": {
                    "type": "string"
                },
                "self": {
                    "type": "string"
                },
                "update_time": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "v1.emptyResponse": {
            "type": "object"
        },
        "v1.errorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "detail": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "v1.refreshTokenResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "v1.verifyTokenRequest": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Swagger Example API",
	Description:      "This is a sample server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
